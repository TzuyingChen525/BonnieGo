let cart = JSON.parse(localStorage.getItem("cart")) || [];

// 更新購物車的 LocalStorage
function saveCartToLocalStorage() {
   localStorage.setItem("cart", JSON.stringify(cart));
}

//購物車數量
function updateItemQuantity(index, newValue) {
   // 將 newValue 轉換為數字類型
   const newQuantity = parseInt(newValue, 10);

   // 驗證新數量是否為有效數字
   if (isNaN(newQuantity) || newQuantity < 1) {
      alert("請輸入有效的商品數量！");
      renderCart(); // 恢復為原來的數量
      return;
   }

   // 檢查是否超過庫存
   if (newQuantity > cart[index].stock) {
      alert("超過庫存數量！");
      renderCart(); // 恢復為原來的數量
      return;
   }

   // 更新數量
   cart[index].quantity = newQuantity;

   // 儲存更新後的購物車資料
   saveCartToLocalStorage();

   // 重新渲染購物車
   renderCart();
}

async function fetchCartItems() {
   const response = await fetch(`http://localhost:8080/api/cart`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",

   });

   return response;
}

// 渲染購物車
function renderCart() {
   const cartList = document.getElementById("cart-items");
   cartList.innerHTML = ""; // 清空購物車
   let totalAmount = 0;
   let carts = [];
   fetchCartItems().then((data) => {
      // console.log(data);

      // carts = data;
   });

   if (carts.length === 0) {
      cartList.innerHTML = '<p style="text-align: center; margin-top: 20px;">購物車是空的。</p>';
   } else {
      carts.forEach((item, index) => {
         totalAmount += item.price * item.quantity;
         cartList.innerHTML += `
            <tr>
               <td><img src="${item.imageUrl}" alt="${item.name}" width="50"></td>
               <td>${item.name}</td>
               <td>
                  <input 
      type="number" 
      value="${item.quantity}" 
      min="1" 
      max="${item.stock}" 
      onchange="updateItemQuantity(${index}, this.value)"
      style="width: 50px; text-align: center;">
               </td>
               <td>$${item.price}</td>
               <td>$${item.price * item.quantity}</td>
               <td><button class="btn" onclick="moveToFavorites(${index})"><svg xmlns="http://www.w3.org/2000/svg" height="20px"
                        viewBox="0 0 24 24" width="20px" fill="#5f6368">
                        <path d="M0 0h24v24H0z" fill="none" />
                        <path
                           d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z" />
                     </svg></button></td>
               <td><button onclick="removeFromCart('${item.name}')" class="btn"><svg xmlns="http://www.w3.org/2000/svg" height="20px"
                        viewBox="0 -960 960 960" width="20px" fill="#5f6368">
                        <path
                           d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z" />
                     </svg></button></td>
            </tr>`;
      });
   }

   // 更新總金額
   const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
   document.getElementById("cart-total").textContent = `$${total}`;

   // 更新購物車數量顯示
   updateCartCount();
}

async function fetchAddToCart(product_id, quantity) {
   try {
      const response = await fetch(`http://localhost:8080/api/cart/add`, {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         credentials: "include",
         body: JSON.stringify({
            product_id: product_id,
            quantity: quantity
         })
      });

      if (!response.ok) {
         throw new Error(`HTTP error! status: ${response.status}`);
      }
      // console.log(response);

      const apiData = await response.json();
      // console.log(apiData);
   } catch (error) {
      console.error("無法加入購物車:", error);
      return [];
   }
}

// 加入購物車
function addToCart(product) {
   // 檢查商品是否已在購物車中
   const existingItem = cart.find(item => item.name === product.name);
   let cartItem = null;
   if (existingItem) {
      console.log(existingItem.quantity);
      console.log(product.stock);

      if (existingItem.quantity < product.stock) {
         // existingItem.quantity += 1;
         fetchAddToCart(product.product_id, product.quantity);
      } else {
         alert("此商品已達到庫存上限！");
         return;
      }
   } else {
      // cart.push({ ...product, quantity: 1 });
   }

   // 儲存購物車資料到 localStorage
   // localStorage.setItem("cart", JSON.stringify(cart));
   // console.log(cartItem);

   renderCart(); // 更新購物車顯示
   updateCartCount(); // 更新購物車數量顯示
}

// 移入收藏功能
function moveToFavorites(index) {
   const item = cart[index];
   console.log("將商品加入收藏:", item);

   // 加入到收藏清單
   addToFavorites({
      product_id: item.product_id,
      name: item.name,
      price: item.price,
      imageUrl: item.imageUrl,
   });

   // 從購物車中移除
   removeFromCart(item.name);
}

// 移除商品
function removeFromCart(productName) {
   cart = cart.filter(item => item.name !== productName); // 刪除該商品
   // 儲存購物車資料到 localStorage
   localStorage.setItem("cart", JSON.stringify(cart));
   renderCart(); // 更新購物車顯示
   updateCartCount(); // 更新購物車數量顯示
}

// 更新購物車數量顯示
function updateCartCount() {
   const cartCountElement = document.getElementById("shoppingCartCount");

   // 計算購物車中所有商品的總數量
   const totalCount = cart.reduce((sum, item) => sum + item.quantity, 0);

   // 更新購物車數量到 HTML 元素
   cartCountElement.textContent = totalCount;
}

// 頁面加載時載入購物車資料
window.onload = function () {
   const savedCart = localStorage.getItem("cart");
   if (savedCart) {
      // 如果有保存的購物車資料，解析並載入
      cart = JSON.parse(savedCart);
      renderCart(); // 更新購物車顯示
      updateCartCount(); // 更新購物車數量顯示
   }
}

// 購物車前往結帳按鈕
document.getElementById('pay-page-link').addEventListener('click', function (event) {
   // 儲存購物車資料到 localStorage
   localStorage.setItem('cart', JSON.stringify(cart)); // 將當前購物車資料儲存到 localStorage
});